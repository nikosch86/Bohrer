# Bohrer SSH Tunnel Server Configuration
# Copy this file to .env and customize as needed
# 
# IMPORTANT: This server runs entirely in Docker containers
# - All paths mentioned (e.g., /data) are INSIDE the container
# - External ports map from Docker host to container internal ports
# - Data is persisted using Docker named volumes

# =====================================================
# DOMAIN CONFIGURATION
# =====================================================
# Base domain for tunnel subdomains (e.g., subdomain.DOMAIN)
DOMAIN=localhost

# =====================================================
# ACME / SSL CERTIFICATE CONFIGURATION  
# =====================================================
# Email address for Let's Encrypt certificate registration
# Leave empty to disable ACME and use self-signed certificates
ACME_EMAIL=admin@example.com

# Use Let's Encrypt staging environment (true) or production (false)
# SAFETY: Always defaults to staging=true to prevent rate limiting
# IMPORTANT: Only set to false for production deployments with real domains
# WARNING: Production has strict rate limits (5 failed attempts per hour)
ACME_STAGING=true

# Custom ACME directory URL (optional)
# Use this for custom PKI/CA servers (e.g., internal Step CA, Smallstep)
# Leave empty to use Let's Encrypt
#ACME_DIRECTORY_URL=https://your-ca.example.com/acme/acme/directory

# Force ACME even for local domains (when using custom ACME server)
# Set to true when using custom PKI for local development
ACME_FORCE_LOCAL=false

# Certificate file paths (inside container)
ACME_CERT_PATH=/data/certs/fullchain.pem
ACME_KEY_PATH=/data/certs/key.pem

# ACME HTTP-01 challenge directory (inside container)
ACME_CHALLENGE_DIR=/data/acme-challenge

# Certificate renewal threshold (days before expiry)
ACME_RENEWAL_DAYS=30

# Skip ACME entirely and use self-signed certificates
# Set to true for development/testing without ACME
SKIP_ACME=false

# =====================================================
# LOGGING CONFIGURATION
# =====================================================
# Log level: DEBUG, INFO, WARN, ERROR, FATAL
# DEBUG shows all messages including detailed debugging info
# INFO shows normal operational messages (default)
# WARN shows warnings and errors only
# ERROR shows errors only
# FATAL shows only fatal errors that cause exit
LOG_LEVEL=INFO

# =====================================================
# PORT CONFIGURATION (DOCKER CONTAINER → HOST MAPPING)
# =====================================================
# The server runs in Docker with this port mapping:
# - Container internal ports (left side in docker-compose.yml)
# - Host external ports (right side, what users connect to)

# INTERNAL PORTS (INSIDE CONTAINER) - Standard ports, rarely need changing
SSH_PORT=22        # Standard SSH port inside container
HTTP_PORT=80       # Standard HTTP port inside container  
HTTPS_PORT=443     # Standard HTTPS port inside container

# EXTERNAL PORTS (DOCKER HOST) - What users actually connect to
SSH_EXTERNAL_PORT=2222    # Maps to container's SSH_PORT
HTTP_EXTERNAL_PORT=8080   # Maps to container's HTTP_PORT
HTTPS_EXTERNAL_PORT=8443  # Maps to container's HTTPS_PORT

# =====================================================
# SSH AUTHENTICATION
# =====================================================
# Path to SSH authorized keys file (inside container)
# Mount your authorized_keys file to this path
SSH_AUTHORIZED_KEYS=/data/authorized_keys

# =====================================================
# USER STORAGE CONFIGURATION
# =====================================================
# User storage backend: "file" (persistent) or "memory" (temporary)
# file: Stores users in JSON file with bcrypt password hashing
# memory: Stores users in memory only (lost on restart)
USER_STORAGE_TYPE=file

# Path to user storage file (when USER_STORAGE_TYPE=file)
# File stores username, bcrypt-hashed password, and timestamps
# Automatically persisted in Docker volume at /data
USER_STORAGE_PATH=/data/users.json

# =====================================================
# WEBUI AUTHENTICATION
# =====================================================
# WebUI admin username and password for Basic Authentication
# Leave empty to auto-generate credentials (recommended for development)
# Set explicit values for production deployments
WEBUI_USERNAME=
WEBUI_PASSWORD=

# Example for production:
# WEBUI_USERNAME=admin
# WEBUI_PASSWORD=your-secure-password-here

# =====================================================
# DEVELOPMENT CONFIGURATION
# =====================================================
# Quick development setup - uses self-signed certificates
# DOMAIN=localhost
# ACME_EMAIL=
# SKIP_ACME=true
# SSH_EXTERNAL_PORT=2222
# HTTP_EXTERNAL_PORT=8080
# HTTPS_EXTERNAL_PORT=8443

# =====================================================
# PRODUCTION CONFIGURATION EXAMPLES
# =====================================================
# Production setup with Let's Encrypt certificates
# IMPORTANT: Only use ACME_STAGING=false for real production with valid domains
# DOMAIN=tunnel.yourdomain.com
# ACME_EMAIL=admin@yourdomain.com
# ACME_STAGING=false                    # EXPLICIT production setting required
# SSH_EXTERNAL_PORT=2222
# HTTP_EXTERNAL_PORT=80
# HTTPS_EXTERNAL_PORT=443

# Custom PKI / Internal CA setup
# DOMAIN=tunnel.company.local
# ACME_EMAIL=admin@company.local
# ACME_DIRECTORY_URL=https://ca.company.local/acme/acme/directory
# ACME_FORCE_LOCAL=true
# ACME_STAGING=false

# =====================================================
# NOTES
# =====================================================
# 1. For development: Use localhost domain with self-signed certs
# 2. For production: Use real domain with Let's Encrypt
# 3. For internal deployment: Use custom ACME_DIRECTORY_URL
# 4. Always test with ACME_STAGING=true first
# 5. DNS setup required: A record for DOMAIN and *.DOMAIN → server IP
# 6. Local development now requires Go 1.23+ (tests run natively)
# 7. Docker is only required for e2e tests